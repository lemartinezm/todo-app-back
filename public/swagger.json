{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"BasicResponse": {
				"properties": {
					"message": {
						"type": "string"
					},
					"status": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"message",
					"status"
				],
				"type": "object",
				"description": "Basic Response containing response status and confirmation or error message"
			},
			"LoginResponse": {
				"properties": {
					"token": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"status": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"message",
					"status"
				],
				"type": "object",
				"description": "Login response including JWT generated"
			},
			"TeamResponse": {
				"properties": {
					"teams": {
						"items": {},
						"type": "array"
					},
					"message": {
						"type": "string"
					},
					"status": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"description": "Response for petitions sent to Teams endpoints"
			},
			"updateTeamOperations": {
				"enum": [
					"ADD_MEMBER",
					"DELETE_MEMBER",
					"ADD_TODO",
					"DELETE_TODO",
					"CHANGE_LEADER"
				],
				"type": "string"
			},
			"TodoSchema": {
				"description": "Schema returned by DB",
				"properties": {
					"_id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deadline": {
						"type": "string",
						"format": "date-time"
					},
					"priority": {
						"type": "string"
					},
					"completed": {
						"type": "boolean"
					},
					"creator": {
						"type": "string"
					},
					"__v": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"_id",
					"name",
					"createdAt",
					"priority",
					"completed",
					"creator",
					"__v"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TodosResponse": {
				"properties": {
					"meta": {
						"properties": {
							"totalDocuments": {
								"type": "number",
								"format": "double"
							},
							"documentsPerPage": {
								"type": "number",
								"format": "double"
							},
							"currentPage": {
								"type": "number",
								"format": "double"
							},
							"totalPages": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"totalDocuments",
							"documentsPerPage",
							"currentPage",
							"totalPages"
						],
						"type": "object",
						"description": "Pagination info"
					},
					"message": {
						"type": "string"
					},
					"todos": {
						"items": {
							"$ref": "#/components/schemas/TodoSchema"
						},
						"type": "array"
					},
					"status": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"description": "Response for petitions sent to ToDos endpoints"
			},
			"GetUserSchema": {
				"description": "Interface used for get requests",
				"properties": {
					"_id": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"todos": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"__v": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"_id",
					"username",
					"email",
					"todos",
					"__v"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UsersResponse": {
				"properties": {
					"message": {
						"type": "string"
					},
					"users": {
						"items": {
							"$ref": "#/components/schemas/GetUserSchema"
						},
						"type": "array"
					},
					"status": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"description": "Response for petitions sent to Users endpoints"
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "todo-app-back",
		"version": "0.1.0",
		"description": "To Do App Backend",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "lemartinezm"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/api/auth/register": {
			"post": {
				"operationId": "RegisterNewUser",
				"responses": {
					"201": {
						"description": "User registered successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BasicResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 201,
											"message": "User registered successfully"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "User registration failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BasicResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to register new User",
				"tags": [
					"AuthController"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"username": {
										"type": "string",
										"description": "User's username"
									},
									"email": {
										"type": "string",
										"description": "User's email"
									},
									"password": {
										"type": "string",
										"description": "User's password"
									}
								},
								"required": [
									"username",
									"email",
									"password"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/api/auth/login": {
			"post": {
				"operationId": "LoginUser",
				"responses": {
					"200": {
						"description": "User logged successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 200,
											"message": "Welcome {username}",
											"token": "{tokenObtained}"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Logging failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to login User",
				"tags": [
					"AuthController"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"password": {
										"type": "string",
										"description": "User's password"
									},
									"username": {
										"type": "string",
										"description": "User's username"
									},
									"email": {
										"type": "string",
										"description": "User's email"
									}
								},
								"required": [
									"password"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/api/teams/me": {
			"get": {
				"operationId": "GetTeamsByParticipant",
				"responses": {
					"200": {
						"description": "Teams obtained successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TeamResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 200,
											"teams": [
												{
													"_id": "62991758c2c45fea46143d93",
													"name": "Las estrellitas",
													"leader": {
														"_id": "6297fa2fb070244515773b8c",
														"username": "martin",
														"email": "martin@email.com"
													},
													"participants": [
														{
															"_id": "6297fa2fb070244515773b8c",
															"username": "martin",
															"email": "martin@email.com"
														}
													],
													"todos": [
														{
															"_id": "62bfafb598899f7e90e68b9b",
															"name": "This is my new ToDo",
															"description": "This is a description example",
															"createdAt": "2022-07-02T02:38:45.826Z",
															"deadline": "2022-07-03T00:00:00.000Z",
															"priority": "low",
															"completed": false,
															"creator": "6297fa2fb070244515773b8c",
															"__v": 0
														},
														{
															"_id": "62c4fdc912d4b095433ee5fa",
															"name": "This is my new ToDo",
															"description": "This is a description example",
															"createdAt": "2022-07-06T03:13:13.171Z",
															"deadline": "2022-07-05T00:00:00.000Z",
															"priority": "low",
															"completed": false,
															"creator": "6297fa2fb070244515773b8c",
															"__v": 0
														}
													],
													"meta": {
														"totalPages": 2,
														"currentPage": 1,
														"documentsPerPage": 10,
														"totalDocuments": 15
													},
													"__v": 0
												},
												{
													"_id": "6299175cc2c45fea46143d95",
													"name": "Las burbujitas",
													"leader": {
														"_id": "6297fa2fb070244515773b8c",
														"username": "jorge",
														"email": "jorge@email.com"
													},
													"participants": [
														{
															"_id": "6297fa2fb070244515773b8c",
															"username": "jorge",
															"email": "jorge@email.com"
														}
													],
													"todos": [
														{
															"_id": "62dc92c893615bf7dcd7bc33",
															"name": "Fourth Kata",
															"description": "",
															"createdAt": "2022-07-24T00:31:04.081Z",
															"deadline": "2022-07-24T00:23:25.042Z",
															"priority": "normal",
															"completed": false,
															"creator": "6297fa51b070244515773b8e",
															"__v": 0
														},
														{
															"_id": "62dc930493615bf7dcd7bc4d",
															"name": "My new todo",
															"description": "",
															"createdAt": "2022-07-24T00:32:04.408Z",
															"deadline": "2022-07-24T00:23:25.042Z",
															"priority": "normal",
															"completed": false,
															"creator": "6297fa51b070244515773b8e",
															"__v": 0
														}
													],
													"meta": {
														"totalPages": 2,
														"currentPage": 1,
														"documentsPerPage": 10,
														"totalDocuments": 15
													},
													"__v": 0
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Something went wrong",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TeamResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Error: Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to get teams for logged user",
				"tags": [
					"TeamController"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "documentsPerPage",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "currentPage",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/teams": {
			"post": {
				"operationId": "CreateNewTeam",
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BasicResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 201,
											"message": "Team created successfully"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Something went wrong",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TeamResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Error: Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to create New Team",
				"tags": [
					"TeamController"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"name": {
										"type": "string"
									},
									"participants": {
										"items": {
											"type": "string"
										},
										"type": "array",
										"description": "Usernames of the participants"
									}
								},
								"required": [
									"name",
									"participants"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"put": {
				"operationId": "UpdateTeam",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BasicResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 200,
											"message": "Participant added successfully"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Something went wrong",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TeamResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Error: Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to update a Team",
				"tags": [
					"TeamController"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"teamId": {
										"type": "string",
										"description": "Team to update"
									},
									"updateOperation": {
										"$ref": "#/components/schemas/updateTeamOperations",
										"description": "Type of update operation"
									},
									"data": {
										"description": "Data to update"
									}
								},
								"required": [
									"teamId",
									"updateOperation"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteTeam",
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BasicResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 200,
											"message": "Team with ID {teamId} deleted successfully"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Something went wrong",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TeamResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Error: Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to delete a Team",
				"tags": [
					"TeamController"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/todos": {
			"get": {
				"operationId": "GetTodos",
				"responses": {
					"200": {
						"description": "ToDos obtained successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodosResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 200,
											"todos": [
												{
													"_id": "6294dd86ecca76f24a89503d",
													"name": "This is a ToDo example",
													"description": "This is a description example",
													"createdAt": "2022-07-29T20:05:48.713Z",
													"deadline": "2022-12-01T05:00:00.000Z",
													"priority": "NORMAL",
													"completed": false,
													"creator": "{creatorId}",
													"__v": 0
												},
												{
													"_id": "6294ddfed8d225386a4f956c",
													"name": "Second ToDo example",
													"description": "This is a description example",
													"createdAt": "2022-07-29T20:05:48.713Z",
													"deadline": "2022-12-01T05:00:00.000Z",
													"priority": "HIGH",
													"completed": false,
													"creator": "{creatorId}",
													"__v": 0
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Something went wrong",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodosResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Error: Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to get all ToDos or one by ID",
				"tags": [
					"TodoController"
				],
				"security": [],
				"parameters": [
					{
						"description": "ToDo ID to obtain",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateNewTodo",
				"responses": {
					"201": {
						"description": "ToDos created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodosResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 201,
											"message": "ToDo created successfully"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Something went wrong",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodosResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Error: Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to create a ToDo",
				"tags": [
					"TodoController"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"name": {
										"type": "string",
										"description": "ToDo name"
									},
									"description": {
										"type": "string",
										"description": "ToDo description"
									},
									"deadline": {
										"type": "string",
										"format": "date-time",
										"description": "ToDo deadline"
									},
									"priority": {
										"type": "string",
										"description": "ToDo priority"
									},
									"teamId": {
										"type": "string",
										"description": "Team ID to add todo"
									}
								},
								"type": "object"
							}
						}
					}
				}
			},
			"put": {
				"operationId": "UpdateTodoById",
				"responses": {
					"200": {
						"description": "ToDo updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodosResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 200,
											"message": "ToDo with id {ToDo ID} updated successfully"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Something went wrong",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodosResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Error: Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to update ToDo by ID",
				"tags": [
					"TodoController"
				],
				"security": [],
				"parameters": [
					{
						"description": "ToDo ID to update",
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"name": {
										"type": "string",
										"description": "New name to update ToDo"
									},
									"description": {
										"type": "string",
										"description": "New description to update ToDo"
									},
									"deadline": {
										"type": "string",
										"format": "date-time",
										"description": "New deadline to update ToDo"
									},
									"priority": {
										"type": "string",
										"description": "New priority to update ToDo"
									},
									"completed": {
										"type": "boolean",
										"description": "New completed to update ToDo"
									}
								},
								"type": "object"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteTodoById",
				"responses": {
					"200": {
						"description": "ToDo deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodosResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 200,
											"message": "ToDo with id {ToDo ID} deleted successfully"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Something went wrong",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodosResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Error: Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to delete a ToDo by ID",
				"tags": [
					"TodoController"
				],
				"security": [],
				"parameters": [
					{
						"description": "ToDo ID to delete",
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/todos/me": {
			"get": {
				"operationId": "GetMyTodos",
				"responses": {
					"200": {
						"description": "Object with status code and confirmation or error message.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodosResponse"
								}
							}
						}
					}
				},
				"description": "Endpoint to Todos of User",
				"tags": [
					"TodoController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Number of documents to get",
						"in": "query",
						"name": "documentsPerPage",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Current page in pagination",
						"in": "query",
						"name": "currentPage",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/users": {
			"get": {
				"operationId": "GetUsers",
				"responses": {
					"200": {
						"description": "Users obtained successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 200,
											"users": [
												{
													"_id": "",
													"username": "",
													"email": "",
													"todos": [],
													"__v": 0
												},
												{
													"_id": "",
													"username": "",
													"email": "",
													"todos": [],
													"__v": 0
												}
											]
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to get all users or one by ID",
				"tags": [
					"UserController"
				],
				"security": [],
				"parameters": [
					{
						"description": "User ID to obtain",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateUser",
				"responses": {
					"200": {
						"description": "User updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 200,
											"message": "User updated successfully"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Something went wrong",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Something went wrong"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "User not found to update",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to update an User by ID",
				"tags": [
					"UserController"
				],
				"security": [],
				"parameters": [
					{
						"description": "User ID to update",
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"username": {
										"type": "string",
										"description": "Updated username"
									},
									"email": {
										"type": "string",
										"description": "Updated email"
									},
									"password": {
										"type": "string",
										"description": "Updated password"
									}
								},
								"type": "object"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteUser",
				"responses": {
					"200": {
						"description": "User deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 200,
											"message": "User deleted successfully"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Something went wrong",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Something went wrong"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "User not found to delete",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to delete User by ID",
				"tags": [
					"UserController"
				],
				"security": [],
				"parameters": [
					{
						"description": "User ID to delete",
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/users/me": {
			"get": {
				"operationId": "GetMe",
				"responses": {
					"200": {
						"description": "User obtained successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 200,
											"users": [
												{
													"_id": "",
													"username": "",
													"email": "",
													"todos": [],
													"__v": 0
												}
											]
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"status": 400,
											"message": "Something went wrong"
										}
									}
								}
							}
						}
					}
				},
				"description": "Endpoint to get logged user info",
				"tags": [
					"UserController"
				],
				"security": [],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}